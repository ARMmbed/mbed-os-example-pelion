From 8720192e832dbf1b19cc233fde1115e20897cac3 Mon Sep 17 00:00:00 2001
From: Jaakko Korhonen <jaakko.korhonen@arm.com>
Date: Mon, 29 Oct 2018 13:15:19 +0200
Subject: [PATCH 3/3] Add M2MInterfaceFactory::create_resource().

---
 mbed-client/mbed-client/m2minterfacefactory.h | 17 +++++
 mbed-client/source/m2minterfacefactory.cpp    | 74 +++++++++++++++++++
 2 files changed, 91 insertions(+)

diff --git a/mbed-client/mbed-client/m2minterfacefactory.h b/mbed-client/mbed-client/m2minterfacefactory.h
index 1c886f5..51b55e8 100644
--- a/mbed-client/mbed-client/m2minterfacefactory.h
+++ b/mbed-client/mbed-client/m2minterfacefactory.h
@@ -111,6 +111,23 @@ public:
      */
     static M2MObject *create_object(const String &name);
 
+    /**
+     * \brief Creates a M2M resource and places it to the given object list.
+     * \param m2m_obj_list Object list where the newly created resource is added.
+     * \param object_id The object ID.
+     * \param object_instance_id The object instance ID.
+     * \param resource_id The resource ID.
+     * \param resource_type The resource type.
+     * \param allowed Defines possible REST operations for the given resource.
+     * \return Pointer to the newly created M2MResource. Returns NULL on failure.
+     */
+    static M2MResource* create_resource(M2MObjectList &m2m_obj_list,
+                                                  int object_id,
+                                                  int object_instance_id,
+                                                  int resource_id,
+                                                  M2MResourceInstance::ResourceType resource_type,
+                                                  M2MBase::Operation allowed);
+
 #ifdef MBED_CLOUD_CLIENT_EDGE_EXTENSION
     /**
      * \brief Creates a endpoint object for the mbed Client Inteface. With this, the
diff --git a/mbed-client/source/m2minterfacefactory.cpp b/mbed-client/source/m2minterfacefactory.cpp
index ba07802..2ff3582 100644
--- a/mbed-client/source/m2minterfacefactory.cpp
+++ b/mbed-client/source/m2minterfacefactory.cpp
@@ -126,6 +126,80 @@ M2MObject* M2MInterfaceFactory::create_object(const String &name)
     return object;
 }
 
+M2MResource* M2MInterfaceFactory::create_resource(M2MObjectList &m2m_obj_list,
+                                                  int object_id,
+                                                  int object_instance_id,
+                                                  int resource_id,
+                                                  M2MResourceInstance::ResourceType resource_type,
+                                                  M2MBase::Operation allowed)
+{
+    tr_debug("M2MInterfaceFactory::create_resource /%d/%d/%d", object_id, object_instance_id, resource_id);
+
+    /* Check and create object if necessary */
+    M2MObject *m2m_obj = NULL;
+    for (int i=0; i<m2m_obj_list.size(); i++) {
+        if (m2m_obj_list[i]->name_id() == object_id) {
+            m2m_obj = m2m_obj_list[i];
+            tr_debug("Found existing /%d", object_id);
+            break;
+        }
+    }
+    if (m2m_obj == NULL) {
+        String object_name_str;
+        object_name_str.append_int(object_id);
+        m2m_obj = M2MInterfaceFactory::create_object(object_name_str);
+        m2m_obj_list.push_back(m2m_obj);
+        tr_debug("Creating new /%d", object_id);
+    }
+    if (m2m_obj == NULL) {
+        return NULL;
+    }
+
+    /* Check and create object instance if necessary */
+    M2MObjectInstanceList obj_inst_list = m2m_obj->instances();
+    M2MObjectInstance *m2mobject_instance = NULL;
+    for (int i=0; i<obj_inst_list.size(); i++) {
+        if (obj_inst_list[i]->instance_id() == object_instance_id) {
+            m2mobject_instance = obj_inst_list[i];
+            tr_debug("Found existing /%d/%d", object_id, object_instance_id);
+            break;
+        }
+    }
+    if (m2mobject_instance == NULL) {
+        m2mobject_instance = m2m_obj->create_object_instance(object_instance_id);
+        tr_debug("Creating new /%d/%d", object_id, object_instance_id);
+    }
+    if (m2mobject_instance == NULL) {
+        return NULL;
+    }
+
+
+    /* Check and create resource if necessary */
+    M2MResourceList m2m_resoure_list = m2mobject_instance->resources();
+    M2MResource *m2m_resource = NULL;
+    for (int i=0; i<m2m_resoure_list.size(); i++) {
+        if (m2m_resoure_list[i]->name_id() == resource_id) {
+            m2m_resource = m2m_resoure_list[i];
+            tr_debug("Found existing /%d/%d/%d", object_id, object_instance_id, resource_id);
+            break;
+        }
+    }
+    if (m2m_resource == NULL) {
+        bool observable = true;
+        String resource_id_str;
+        resource_id_str.append_int(resource_id);
+        m2m_resource = m2mobject_instance->create_dynamic_resource(resource_id_str, "", resource_type, observable);
+        tr_debug("Creating new /%d/%d/%d", object_id, object_instance_id, resource_id);
+    }
+    if (m2m_resource == NULL) {
+        return NULL;
+    }
+
+    m2m_resource->set_operation(allowed);
+
+    return m2m_resource;
+}
+
 #ifdef MBED_CLOUD_CLIENT_EDGE_EXTENSION
 M2MEndpoint* M2MInterfaceFactory::create_endpoint(const String &name)
 {
-- 
2.19.1

